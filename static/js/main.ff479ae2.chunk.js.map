{"version":3,"sources":["Page/Overlay/Overlay.js","Players/Setup/Setup.js","Players/PlayerCard/PlayerCard.js","Page/GameOver/GameOver.js","Players/Dash/Dash.js","Game/Card/Card.js","Game/Board/Board.js","Game/bank.js","Page/App.js","reportWebVitals.js","index.js"],"names":["Overlay","props","id","Setup","index","parseInt","className","name","value","onChange","e","handleChange","placeholder","onClick","buttonFunc","Player","nameSet","turn","winner","number","String","fromCharCode","score","setPlayer","GameOver","winnerName","player1","player2","console","log","rematch","Dash","handlePlayerNameChange","event","playerArray","state","players","target","split","setState","length","set","startGame","this","map","player","scores","setup","bind","Component","Card","status","cardClick","u1","u2","Board","bank","item","App","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","setUpGame","overlay","playerTurn","resetBoard","forEach","card","cards","firstClick","playerScore","gameOver","nextPlayer","cardCompare","tempState","stateIndex1","stateIndex2","animationStatus","newStatus","card1temp","card2temp","setTimeout","cardID","cardStatus","cardName","i","findIndex","stateCard","matchIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff479ae2.chunk.js","sourcesContent":["import './Overlay.css';\r\n\r\nfunction Overlay(props) {\r\n\r\n    return (\r\n        <div id=\"overlay\">\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Overlay;","import './Setup.css';\r\n\r\nfunction Setup(props) {\r\n\r\n    let index = parseInt(props.id) - 1;\r\n\r\n    return (\r\n        <article className={`setup-${props.id} setup-panel`}>\r\n            <input\r\n                id={`setupplayer-${props.id}`}\r\n                name={`player${props.id}-setup`}\r\n                value={props.name}\r\n                onChange={(e) => props.handleChange(e, props.id)}\r\n                placeholder=\"Enter Name\">\r\n            </input>\r\n            <button onClick={() => props.buttonFunc(index)}>Set</button>\r\n        </article>\r\n    );\r\n\r\n}\r\n\r\nexport default Setup;","import Setup from '../Setup/Setup';\r\n\r\nimport './PlayerCard.css';\r\n\r\nfunction Player(props) {\r\n    if (props.nameSet) {\r\n        return (\r\n            <table className={`player${props.turn ? \" my-turn\" : \"\"}${props.winner ? \" winner-declared\" : \"\"} player-${props.number}`}>\r\n                <tbody>\r\n                    <tr>\r\n                        <td className=\"label\">Player {props.number}:</td>\r\n                        <td className=\"input\">\r\n                            {((props.winner === props.number) || (props.winner === 3))\r\n                                ? <span className=\"winner-crown\">{String.fromCharCode(\"0xD83D\", \"0xDC51\")}</span>\r\n                                : null\r\n                            }\r\n                            {props.name}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"label\">Score:</td>\r\n                        <td className=\"input\">\r\n                            {props.score}\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>)\r\n    } else {\r\n        return (\r\n            <div className={`player player-${props.number} setup-wrapper`}>\r\n                <Setup id={props.number}\r\n                    name={props.name}\r\n                    buttonFunc={props.setPlayer}\r\n                    handleChange={props.handleChange} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Player;","import './GameOver.css';\r\n\r\nfunction GameOver(props) {\r\n    let winnerName = '';\r\n\r\n    switch (props.winner) {\r\n        case 1:\r\n            winnerName = props.player1.name;\r\n            break;\r\n        case 2:\r\n            winnerName = props.player2.name;\r\n            break;\r\n        case 3:\r\n            winnerName = ''; //it's a tie\r\n            break;\r\n        default:\r\n            console.log(\"switch case error\");\r\n            return;\r\n    }\r\n    return (\r\n        <div id=\"game-over\">\r\n            {winnerName\r\n                ? <span>{winnerName} wins!</span>\r\n                : <span>It's a tie!</span>\r\n            }\r\n            <div className=\"pyro fireworks1\"> {/* css fireworks by Eddie Lin on jsfiddle */}\r\n                <div className=\"before\"></div>\r\n                <div className=\"after\"></div>\r\n            </div>\r\n            <div className=\"pyro fireworks2\"> {/* css fireworks by Eddie Lin on jsfiddle */}\r\n                <div className=\"before\"></div>\r\n                <div className=\"after\"></div>\r\n            </div>\r\n            <button id=\"rematch\" onClick={props.rematch}>Rematch?</button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default GameOver;","import React, { Component } from 'react';\r\n\r\nimport Player from '../PlayerCard/PlayerCard';\r\nimport GameOver from '../../Page/GameOver/GameOver';\r\n\r\nimport './Dash.css';\r\n\r\nclass Dash extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            players: [\r\n                {\r\n                    id: 1,\r\n                    name: \"\",\r\n                    set: false\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: \"\",\r\n                    set: false\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    handlePlayerNameChange = (event) => {\r\n        let playerArray = this.state.players;\r\n        playerArray[parseInt(event.target.id.split(\"-\")[1]) - 1].name = event.target.value\r\n        this.setState({ players: playerArray })\r\n\r\n    }\r\n\r\n    setPlayer = (index) => {\r\n        let playerArray = this.state.players;\r\n        if (playerArray[index].name.length > 0) {\r\n            playerArray[index].set = true;\r\n            this.setState({ players: playerArray })\r\n            //start the game if both names are set\r\n            if (playerArray[0].set && playerArray[1].set) {\r\n                this.props.startGame();\r\n            }\r\n        }\r\n    }\r\n\r\n    turn = this.props.turn;\r\n\r\n    componentDidMount() {\r\n        console.log(\"dash mounted\")\r\n        console.log(this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <aside id=\"player-bank\" className={`${this.props.winner ? \" winner-declared\" : \"\"} turn-${this.props.turn}`}>\r\n                {this.state.players.map(player => {\r\n                    return <Player\r\n                        key={`player-${player.id}`}\r\n                        id={`player-${player.id}`}\r\n                        number={player.id}\r\n                        name={player.name}\r\n                        score={this.props.scores[player.id - 1]}\r\n                        turn={this.props.turn === player.id}\r\n                        setup={this.props.setup}\r\n                        setPlayer={this.setPlayer.bind(this)}\r\n                        handleChange={this.handlePlayerNameChange.bind(this)}\r\n                        nameSet={player.set}\r\n                        winner={this.props.winner}\r\n                    />\r\n                })}\r\n                {this.props.winner\r\n                    ? <GameOver\r\n                        player1={this.state.players[0]}\r\n                        player2={this.state.players[1]}\r\n                        winner={this.props.winner}\r\n                        rematch={this.props.rematch} />\r\n                    : null}\r\n            </aside>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dash;","import './Card.css';\r\n\r\n\r\nfunction Card(props) {\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"card-wrapper\">\r\n            <article className={`card ${props.name} ${props.status} turn-${props.turn}`} id={props.id} \r\n            onClick={() => props.cardClick(props.id, props.status, props.name)}>\r\n                <span className=\"img\">{String.fromCharCode(props.u1, props.u2)}</span>\r\n            </article>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import Card from '../Card/Card'\r\nimport './Board.css';\r\n\r\nfunction Board(props) {\r\n    return (\r\n        <div className=\"board\">\r\n            {props.bank.map(item => {\r\n                return <Card key={item.id} \r\n                id={item.id} \r\n                u1={item.u1} u2={item.u2} \r\n                name={item.name}\r\n                status={item.status}\r\n                cardClick={props.cardClick}\r\n                turn={props.turn} />\r\n            })}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Board;\r\n","const bank = [\r\n    { id: 1, u1: \"0xD83C\", u2: \"0xDF37\", name: \"tulip\", status: \"waiting\" },\r\n    { id: 2, u1: \"0xD83C\", u2: \"0xDF37\", name: \"tulip\", status: \"waiting\" },\r\n    { id: 3, u1: \"0xD83C\", u2: \"0xDF38\", name: \"sakura\", status: \"waiting\" },\r\n    { id: 4, u1: \"0xD83C\", u2: \"0xDF38\", name: \"sakura\", status: \"waiting\" },\r\n    { id: 5, u1: \"0xD83C\", u2: \"0xDF3B\", name: \"sunflower\", status: \"waiting\" },\r\n    { id: 6, u1: \"0xD83C\", u2: \"0xDF3B\", name: \"sunflower\", status: \"waiting\" },\r\n    { id: 7, u1: \"0xD83C\", u2: \"0xDF08\", name: \"rainbow\", status: \"waiting\" },\r\n    { id: 8, u1: \"0xD83C\", u2: \"0xDF08\", name: \"rainbow\", status: \"waiting\" },\r\n    { id: 9, u1: \"0xD83C\", u2: \"0xDF35\", name: \"cactus\", status: \"waiting\" },\r\n    { id: 10, u1: \"0xD83C\", u2: \"0xDF35\", name: \"cactus\", status: \"waiting\" },\r\n    { id: 11, u1: \"0xD83C\", u2: \"0xDF3A\", name: \"hibiscus\", status: \"waiting\" },\r\n    { id: 12, u1: \"0xD83C\", u2: \"0xDF3A\", name: \"hibiscus\", status: \"waiting\" },\r\n    { id: 13, u1: \"0xD83C\", u2: \"0xDF44\", name: \"mushroom\", status: \"waiting\" },\r\n    { id: 14, u1: \"0xD83C\", u2: \"0xDF44\", name: \"mushroom\", status: \"waiting\" },\r\n    { id: 15, u1: \"0xD83C\", u2: \"0xDF3C\", name: \"daisy\", status: \"waiting\" },\r\n    { id: 16, u1: \"0xD83C\", u2: \"0xDF3C\", name: \"daisy\", status: \"waiting\" },\r\n    { id: 17, u1: \"0xD83C\", u2: \"0xDF39\", name: \"rose\", status: \"waiting\" },\r\n    { id: 18, u1: \"0xD83C\", u2: \"0xDF39\", name: \"rose\", status: \"waiting\" },\r\n    { id: 19, u1: \"0xD83C\", u2: \"0xDF33\", name: \"tree\", status: \"waiting\" },\r\n    { id: 20, u1: \"0xD83C\", u2: \"0xDF33\", name: \"tree\", status: \"waiting\" }\r\n  ]\r\n\r\nexport default bank;","import React, { Component } from 'react';\n\nimport Overlay from '../Page/Overlay/Overlay';\nimport PlayerDash from '../Players/Dash/Dash';\nimport Board from '../Game/Board/Board';\nimport bank from '../Game/bank';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      overlay: true,\n      setup: true,\n      cards: [],\n      firstClick: {\n        name: null,\n        id: null\n      },\n      playerTurn: 0,\n      playerScore: [0, 0],\n      winner: null\n    };\n  }\n\n  //using the Fisher-Yates (aka Knuth) Shuffle\n  shuffle = (array) => {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  setUpGame = () => {\n    this.setState({\n      setup: true,\n    })\n  }\n\n  startGame = () => {\n    //play button after setting names\n    console.log(\"play\");\n    this.setState({\n      overlay: false,\n      setup: false,\n      playerTurn: 1\n    })\n    console.log(this.state)\n    this.resetBoard();\n  }\n\n  resetBoard = () => {\n    bank.forEach(card => {\n      card.status = \"waiting\";\n    })\n    this.setState({\n      cards: this.shuffle(bank)\n    })\n    if (this.state.winner) {\n      this.setState({\n        firstClick: {\n          name: null,\n          id: null\n        },\n        playerTurn: 1,\n        playerScore: [0, 0],\n        winner: null\n      })\n    }\n\n  }\n\n  gameOver = () => {\n    if (this.state.playerScore[0] > this.state.playerScore[1]) {\n      this.setState({ winner: 1 })\n    } else if (this.state.playerScore[0] < this.state.playerScore[1]) {\n      this.setState({ winner: 2 })\n    } else {\n      this.setState({ winner: 3 })\n    }\n  }\n\n  nextPlayer = (playerTurn) => {\n    if (playerTurn === 1) {\n      return 2;\n    } else if (playerTurn === 2) {\n      return 1;\n    } else {\n      console.log(\"player turn error: \", playerTurn)\n    }\n  }\n\n  cardCompare = (tempState, stateIndex1, stateIndex2) => {\n    let animationStatus = null;\n    let newStatus = null;\n    let card1temp = this.state.cards[stateIndex1]\n    let card2temp = this.state.cards[stateIndex2]\n    if (card1temp.name === card2temp.name) {\n      animationStatus = \"match\"\n      newStatus = \"removed\";\n      tempState.playerScore[tempState.playerTurn - 1]++;\n    } else {\n      animationStatus = \"no-match\"\n      newStatus = \"waiting\";\n      tempState.playerTurn = this.nextPlayer(tempState.playerTurn)\n    }\n    //change the status of the cards on the page so they \"animate\"\n    tempState.cards[stateIndex1].status = animationStatus\n    tempState.cards[stateIndex2].status = animationStatus\n    this.setState({ cards: tempState.cards })\n    setTimeout(() => {\n      //three seconds later, update state (with card statuses back to normal)\n      //which will resume the game \n      tempState.cards[stateIndex1].status = newStatus\n      tempState.cards[stateIndex2].status = newStatus\n      this.setState({\n        overlay: false,\n        cards: tempState.cards,\n        firstClick: { id: null, name: null },\n        playerTurn: tempState.playerTurn,\n        playerScore: tempState.playerScore\n      })\n      if ((tempState.playerScore[0] + tempState.playerScore[1]) === 10) {\n        this.gameOver();\n      }\n    }, 500)\n  }\n\n  cardClick = (cardID, cardStatus, cardName) => {\n    let tempState = this.state;\n    let i = (tempState.cards).findIndex((stateCard) => stateCard.id === cardID)\n    if (cardStatus === \"waiting\") {\n      tempState.cards[i].status = \"clicked\";\n      //first click of pair\n      if (tempState.firstClick.id === null) {\n        tempState.firstClick = { id: cardID, name: cardName }\n        this.setState({\n          cards: tempState.cards,\n          firstClick: tempState.firstClick\n        })\n      } else { //second click of pair\n        this.setState({ overlay: true }) //prevents player from clicking again before match finishes\n        let matchIndex = (tempState.cards).findIndex((stateCard) => stateCard.id === tempState.firstClick.id)\n        //turns over clicked card\n        this.setState({\n          cards: tempState.cards,\n        })\n        //timer for a second so player can look at both cards\n        setTimeout(() => {\n          this.cardCompare(tempState, i, matchIndex)\n        }, 200)\n      }\n    }\n  }\n\n  componentDidMount() {\n    console.log(\"app mounted\")\n    console.log(this.state)\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\" >\n        <PlayerDash\n          turn={this.state.playerTurn}\n          scores={this.state.playerScore}\n          setup={this.state.setup}\n          startGame={this.startGame.bind(this)}\n          winner={this.state.winner}\n          rematch={this.resetBoard.bind(this)} />\n        <div className=\"board-wrapper\">\n          {this.state.overlay\n            ? <Overlay />\n            : null\n          }\n          <Board bank={this.state.cards} cardClick={this.cardClick} turn={this.state.playerTurn} />\n        </div>\n        <div id=\"app-footer\"></div>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Page/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}