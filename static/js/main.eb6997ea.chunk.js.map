{"version":3,"sources":["Card/Card.js","Board/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","name","status","id","onClick","cardClick","String","fromCharCode","u1","u2","Board","bank","map","item","App","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","startGame","setState","overlay","gameStarted","resetGame","cards","playerTurn","nextPlayer","console","log","cardCompare","tempState","stateIndex1","stateIndex2","animationStatus","newStatus","card1temp","state","card2temp","setTimeout","firstClick","cardID","cardStatus","cardName","i","findIndex","stateCard","matchIndex","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb6997ea.chunk.js","sourcesContent":["import './Card.css';\r\n\r\n\r\nfunction Card(props) {\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"card-wrapper\">\r\n            <article className={`card ${props.name} ${props.status}`} id={props.id} \r\n            onClick={() => props.cardClick(props.id, props.status, props.name)}>\r\n                <span className=\"img\">{String.fromCharCode(props.u1, props.u2)}</span>\r\n            </article>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import Card from '../Card/Card'\r\nimport './Board.css';\r\n\r\nfunction Board(props) {\r\n    return (\r\n        <div className=\"board\">\r\n            {props.bank.map(item => {\r\n                return <Card key={item.id} \r\n                id={item.id} \r\n                u1={item.u1} u2={item.u2} \r\n                name={item.name}\r\n                status={item.status}\r\n                cardClick={props.cardClick} />\r\n            })}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport Board from './Board/Board'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      overlay: true,\n      gameStarted: false,\n      cards: [],\n      firstClick: {\n        name: null,\n        id: null\n      },\n      playerTurn: 0\n    };\n  }\n\n  //using the Fisher-Yates (aka Knuth) Shuffle\n  shuffle = (array) => {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  startGame = () => {\n    this.setState({ overlay: false, gameStarted: true })\n    this.resetGame();\n  }\n\n  resetGame = () => {\n    let bank = [\n      { id: 1, u1: \"0xD83C\", u2: \"0xDF37\", name: \"tulip\", status: \"waiting\" },\n      { id: 2, u1: \"0xD83C\", u2: \"0xDF37\", name: \"tulip\", status: \"waiting\" },\n      { id: 3, u1: \"0xD83C\", u2: \"0xDF38\", name: \"sakura\", status: \"waiting\" },\n      { id: 4, u1: \"0xD83C\", u2: \"0xDF38\", name: \"sakura\", status: \"waiting\" },\n      { id: 5, u1: \"0xD83C\", u2: \"0xDF3B\", name: \"sunflower\", status: \"waiting\" },\n      { id: 6, u1: \"0xD83C\", u2: \"0xDF3B\", name: \"sunflower\", status: \"waiting\" },\n      { id: 7, u1: \"0xD83C\", u2: \"0xDF08\", name: \"rainbow\", status: \"waiting\" },\n      { id: 8, u1: \"0xD83C\", u2: \"0xDF08\", name: \"rainbow\", status: \"waiting\" },\n      { id: 9, u1: \"0xD83C\", u2: \"0xDF35\", name: \"cactus\", status: \"waiting\" },\n      { id: 10, u1: \"0xD83C\", u2: \"0xDF35\", name: \"cactus\", status: \"waiting\" },\n      { id: 11, u1: \"0xD83C\", u2: \"0xDF3A\", name: \"hibiscus\", status: \"waiting\" },\n      { id: 12, u1: \"0xD83C\", u2: \"0xDF3A\", name: \"hibiscus\", status: \"waiting\" },\n      { id: 13, u1: \"0xD83C\", u2: \"0xDF44\", name: \"mushroom\", status: \"waiting\" },\n      { id: 14, u1: \"0xD83C\", u2: \"0xDF44\", name: \"mushroom\", status: \"waiting\" },\n      { id: 15, u1: \"0xD83C\", u2: \"0xDF3C\", name: \"daisy\", status: \"waiting\" },\n      { id: 16, u1: \"0xD83C\", u2: \"0xDF3C\", name: \"daisy\", status: \"waiting\" },\n      { id: 17, u1: \"0xD83C\", u2: \"0xDF39\", name: \"rose\", status: \"waiting\" },\n      { id: 18, u1: \"0xD83C\", u2: \"0xDF39\", name: \"rose\", status: \"waiting\" },\n      { id: 19, u1: \"0xD83C\", u2: \"0xDF33\", name: \"tree\", status: \"waiting\" },\n      { id: 20, u1: \"0xD83C\", u2: \"0xDF33\", name: \"tree\", status: \"waiting\" }\n    ]\n    this.setState({ cards: this.shuffle(bank), playerTurn: 1 })\n  }\n\n  nextPlayer = (playerTurn) => {\n    if (playerTurn === 1) {\n      return 2;\n    } else if (playerTurn === 2) {\n      return 1;\n    } else {\n      console.log(\"player turn error: \", playerTurn)\n    }\n  }\n\n  cardCompare = (tempState, stateIndex1, stateIndex2) => {\n    let animationStatus = null;\n    let newStatus = null;\n    let card1temp = this.state.cards[stateIndex1]\n    let card2temp = this.state.cards[stateIndex2]\n    if (card1temp.name === card2temp.name) {\n      animationStatus = \"match\"\n      newStatus = \"removed\";\n    } else { \n      animationStatus = \"no-match\"\n      newStatus = \"waiting\";\n      tempState.playerTurn = this.nextPlayer(tempState.playerTurn)\n    }\n    //change the status of the cards on the page so they animate\n    tempState.cards[stateIndex1].status = animationStatus\n    tempState.cards[stateIndex2].status = animationStatus\n    this.setState({ cards: tempState.cards })\n    setTimeout(() => {\n      //three seconds later, give the new state with card statuses back to normal\n      //back to the cardClick function, which will set it to state and resume the game \n      tempState.cards[stateIndex1].status = newStatus\n      tempState.cards[stateIndex2].status = newStatus\n      this.setState({ \n        overlay: false,\n        cards: tempState.cards,\n        firstClick: { id: null, name: null },\n        playerTurn: tempState.playerTurn })\n      console.log(this.state)\n    }, 1000)\n  }\n\n  cardClick = (cardID, cardStatus, cardName) => {\n    let tempState = this.state;\n    let i = (tempState.cards).findIndex((stateCard) => stateCard.id === cardID)\n    switch (cardStatus) {\n      case \"waiting\":\n        tempState.cards[i].status = \"clicked\";\n        //first click of pair\n        if (tempState.firstClick.id === null) {\n          tempState.firstClick = { id: cardID, name: cardName }\n          this.setState({ \n            cards: tempState.cards,\n            firstClick: tempState.firstClick\n          })\n          console.log(this.state)\n        } else { //second click of pair\n          this.setState({ overlay: true }) //prevents player from clicking again before match finishes\n          let matchIndex = (tempState.cards).findIndex((stateCard) => stateCard.id === tempState.firstClick.id)\n          //turns over clicked card\n          this.setState({ \n            cards: tempState.cards,\n          })\n          //timer for a second so player can look at both cards\n          setTimeout(() => {\n            this.cardCompare(tempState, i, matchIndex)\n          }, 500)\n        }\n        break;\n      case \"clicked\":\n        tempState.cards[i].status = \"waiting\"\n        this.setState({ \n          cards: tempState.cards,\n        })\n        break;\n      case \"removed\":\n        break;\n      default:\n        console.log(\"switch case error: \", cardStatus)\n    }\n  }\n\n  componentDidMount() {\n    //roll up a new game\n    console.log(\"app mounted\")\n    if (!this.state.gameStarted) {\n      this.resetGame();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        {this.state.overlay \n        ? <div id=\"overlay\">\n          {this.state.gameStarted \n            ? null \n            : <button id=\"start\" onClick={this.startGame}>Start Game</button>\n          }\n          </div>\n        : null \n        }\n        <Board bank={this.state.cards} cardClick={this.cardClick} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}