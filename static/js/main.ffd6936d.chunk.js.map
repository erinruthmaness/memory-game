{"version":3,"sources":["Page/Overlay/Overlay.js","Page/BrowserDetector.js","Page/Instructions/Instructions.js","Players/Setup/Setup.js","Players/PlayerCard/PlayerCard.js","Page/GameOver/GameOver.js","Players/Dash/Dash.js","Game/Card/Card.js","Game/Board/Board.js","Game/bank.js","Page/App.js","reportWebVitals.js","index.js"],"names":["Overlay","props","id","detectBrowser","tem","ua","navigator","userAgent","M","match","test","name","version","exec","replace","appName","appVersion","splice","Instructions","copyText","state","thisBrowser","window","clipboardData","setData","clipboard","writeText","setState","copiedEmail","copedEmail","this","className","onClick","bind","toggle","Component","Setup","index","parseInt","value","onChange","e","handleChange","placeholder","buttonFunc","Player","nameSet","turn","winner","number","String","fromCharCode","score","setPlayer","GameOver","winnerName","player1","player2","console","log","rematch","Dash","toggleInstructions","tempBool","instructions","handlePlayerNameChange","event","playerArray","players","target","split","length","set","startGame","map","player","scores","setup","Card","status","cardClick","u1","u2","Board","bank","item","App","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","setUpGame","overlay","playerTurn","resetBoard","forEach","card","cards","firstClick","playerScore","gameOver","nextPlayer","cardCompare","tempState","stateIndex1","stateIndex2","animationStatus","newStatus","card1temp","card2temp","setTimeout","cardID","cardStatus","cardName","i","findIndex","stateCard","matchIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffd6936d.chunk.js","sourcesContent":["import './Overlay.css';\r\n\r\nfunction Overlay(props) {\r\n\r\n    return (\r\n        <div id=\"overlay\">\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Overlay;","/**\r\nmodified from: https://www.digitalminds.io/blog/detecting-outdated-browsers-in-vanilla-javascript\r\n*/\r\n\r\nfunction detectBrowser() {\r\n    var ua = navigator.userAgent,\r\n        tem,\r\n        M =\r\n            ua.match(\r\n                /(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i\r\n            ) || [];\r\n\r\n    if (/trident/i.test(M[1])) {\r\n        tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\r\n        return { name: \"IE\", version: tem[1] || \"\" };\r\n    }\r\n\r\n    if (M[1] === \"Chrome\") {\r\n        tem = ua.match(/\\b(OPR|Edge)\\/(\\d+)/);\r\n        if (tem != null) {\r\n            return { name: tem[1].replace(\"OPR\", \"Opera\"), version: tem[2] };\r\n        }\r\n    }\r\n\r\n    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, \"-?\"];\r\n\r\n    if ((tem = ua.match(/version\\/(\\d+)/i)) != null) {\r\n        M.splice(1, 1, tem[1]);\r\n    }\r\n\r\n    return { name: M[0], version: M[1] };\r\n}\r\n\r\nexport default detectBrowser;","import React, { Component } from 'react';\r\n\r\nimport detectBrowser from '../BrowserDetector';\r\n\r\nimport './Instructions.css';\r\n\r\n\r\nclass Instructions extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            thisBrowser: null,\r\n            copedEmail: false\r\n        };\r\n    }\r\n\r\n    copyText = () => {\r\n        if (this.state.thisBrowser.name === \"IE\") {\r\n            window.clipboardData.setData(\"Text\", \"erinruthmaness@gmail.com\");\r\n        } else {\r\n            navigator.clipboard.writeText(\"erinruthmaness@gmail.com\");\r\n        }\r\n        this.setState({ copiedEmail: true });\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.setState({ thisBrowser: detectBrowser() })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <article id=\"instructions\" className=\"rainbow-background\">\r\n                <div id=\"instructions-wrapper\">\r\n                <header>Welcome to the <span className=\"game-name rainbow-text\">Memory Game</span>!</header>\r\n                <div className=\"rainbow-background line-break\"></div>\r\n                <section>To begin, enter each player's name above and click \"Set\" when you have it right!</section>\r\n                <section>The board will fill with twenty cards.  Each player will have a chance to turn over two cards in search of a match.</section>\r\n                <section>If you find a match, you get another turn.  If you don't, the cards will flip back over, and your competitor gets a turn.  Whoever finds the most matches out of ten wins!</section>\r\n                <section>Have fun, and if you know of anyone hiring a JavaScript/jQuery or React developer, <span className={`tooltip${this.state.copiedEmail ? \" email-copied\" : \"\"}`} \r\n                    onClick={this.copyText.bind(this)}>email me\r\n                    <span className=\"tooltip-text\">\r\n                            {this.state.copiedEmail ? \"Thank you!\" : \"Click to copy my email address\"}\r\n                        </span>\r\n                    </span>!\r\n                </section>\r\n                <button id=\"dismiss-instructions\" className=\"pastel-rainbow-background\" \r\n                    onClick={this.props.toggle}>Dismiss</button>\r\n                    </div>\r\n            </article>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Instructions;","import './Setup.css';\r\n\r\nfunction Setup(props) {\r\n\r\n    let index = parseInt(props.id) - 1;\r\n\r\n    return (\r\n        <article className={`setup-${props.id} setup-panel`}>\r\n            <input\r\n                id={`setupplayer-${props.id}`}\r\n                name={`player${props.id}-setup`}\r\n                value={props.name}\r\n                onChange={(e) => props.handleChange(e, props.id)}\r\n                placeholder=\"Enter Name\">\r\n            </input>\r\n            <button onClick={() => props.buttonFunc(index)}>Set</button>\r\n        </article>\r\n    );\r\n\r\n}\r\n\r\nexport default Setup;","import Setup from '../Setup/Setup';\r\n\r\nimport './PlayerCard.css';\r\n\r\nfunction Player(props) {\r\n    if (props.nameSet) {\r\n        return (\r\n            <table className={`player${props.turn ? \" my-turn\" : \"\"}${props.winner ? \" winner-declared\" : \"\"} player-${props.number}`}>\r\n                <tbody>\r\n                    <tr>\r\n                        <td className=\"label\">Player {props.number}:</td>\r\n                        <td className=\"input\">\r\n                            {((props.winner === props.number) || (props.winner === 3))\r\n                                ? <span className=\"winner-crown\">{String.fromCharCode(\"0xD83D\", \"0xDC51\")}</span>\r\n                                : null\r\n                            }\r\n                            {props.name}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"label\">Score:</td>\r\n                        <td className=\"input\">\r\n                            {props.score}\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>)\r\n    } else {\r\n        return (\r\n            <div className={`player player-${props.number} setup-wrapper`}>\r\n                <Setup id={props.number}\r\n                    name={props.name}\r\n                    buttonFunc={props.setPlayer}\r\n                    handleChange={props.handleChange} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Player;","import './GameOver.css';\r\n\r\nfunction GameOver(props) {\r\n    let winnerName = '';\r\n\r\n    switch (props.winner) {\r\n        case 1:\r\n            winnerName = props.player1.name;\r\n            break;\r\n        case 2:\r\n            winnerName = props.player2.name;\r\n            break;\r\n        case 3:\r\n            winnerName = ''; //it's a tie\r\n            break;\r\n        default:\r\n            console.log(\"switch case error\");\r\n            return;\r\n    }\r\n    return (\r\n        <div id=\"game-over\">\r\n            {winnerName\r\n                ? <span>{winnerName} wins!</span>\r\n                : <span>It's a tie!</span>\r\n            }\r\n            <div className=\"pyro fireworks1\"> {/* css fireworks by Eddie Lin on jsfiddle */}\r\n                <div className=\"before\"></div>\r\n                <div className=\"after\"></div>\r\n            </div>\r\n            <div className=\"pyro fireworks2\"> {/* css fireworks by Eddie Lin on jsfiddle */}\r\n                <div className=\"before\"></div>\r\n                <div className=\"after\"></div>\r\n            </div>\r\n            <button id=\"rematch\" onClick={props.rematch}>Rematch?</button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default GameOver;","import React, { Component, useEffect } from 'react';\r\n\r\nimport Instructions from '../../Page/Instructions/Instructions';\r\nimport Player from '../PlayerCard/PlayerCard';\r\nimport GameOver from '../../Page/GameOver/GameOver';\r\n\r\nimport './Dash.css';\r\n\r\nclass Dash extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            players: [\r\n                {\r\n                    id: 1,\r\n                    name: \"\",\r\n                    set: false\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: \"\",\r\n                    set: false\r\n                }\r\n            ],\r\n            instructions: true\r\n        };\r\n    }\r\n\r\n    toggleInstructions = () => {\r\n        let tempBool = this.state.instructions;\r\n        this.setState({ instructions: !tempBool})\r\n    }\r\n\r\n    handlePlayerNameChange = (event) => {\r\n        let playerArray = this.state.players;\r\n        playerArray[parseInt(event.target.id.split(\"-\")[1]) - 1].name = event.target.value\r\n        this.setState({ players: playerArray })\r\n    }\r\n\r\n    setPlayer = (index) => {\r\n        let playerArray = this.state.players;\r\n        if (playerArray[index].name.length > 0) {\r\n            playerArray[index].set = true;\r\n            this.setState({ players: playerArray })\r\n            //start the game if both names are set\r\n            if (playerArray[0].set && playerArray[1].set) {\r\n                this.props.startGame();\r\n                this.setState({ instructions: false })\r\n            }\r\n        }\r\n    }\r\n\r\n    turn = this.props.turn;\r\n\r\n    componentDidMount() {\r\n        console.log(\"dash mounted\")\r\n        console.log(this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <aside id=\"player-bank\" \r\n                className={`${this.props.winner ? \" winner-declared\" : \"\"} turn-${this.props.turn}`}\r\n                key={this.props.setup}>\r\n                {this.state.players.map(player => {\r\n                    return <Player\r\n                        key={`player-${player.id}`}\r\n                        id={`player-${player.id}`}\r\n                        number={player.id}\r\n                        name={player.name}\r\n                        score={this.props.scores[player.id - 1]}\r\n                        turn={this.props.turn === player.id}\r\n                        setup={this.props.setup}\r\n                        setPlayer={this.setPlayer.bind(this)}\r\n                        handleChange={this.handlePlayerNameChange.bind(this)}\r\n                        nameSet={player.set}\r\n                        winner={this.props.winner}\r\n                    />\r\n                })}\r\n                {this.props.winner\r\n                    ? <GameOver\r\n                        player1={this.state.players[0]}\r\n                        player2={this.state.players[1]}\r\n                        winner={this.props.winner}\r\n                        rematch={this.props.rematch} />\r\n                    : null}\r\n                <button id=\"toggle-instructions\" className=\"pastel-rainbow-background\" onClick={this.toggleInstructions}>?</button>\r\n                {this.state.instructions\r\n                    ? < Instructions toggle={this.toggleInstructions.bind(this)} />\r\n                    : null}\r\n            </aside>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dash;","import './Card.css';\r\n\r\n\r\nfunction Card(props) {\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"card-wrapper\">\r\n            <article className={`card ${props.name} ${props.status} turn-${props.turn}`} id={props.id} \r\n            onClick={() => props.cardClick(props.id, props.status, props.name)}>\r\n                <span className=\"img\">{String.fromCharCode(props.u1, props.u2)}</span>\r\n            </article>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import Card from '../Card/Card'\r\nimport './Board.css';\r\n\r\nfunction Board(props) {\r\n    return (\r\n        <div className=\"board\">\r\n            {props.bank.map(item => {\r\n                return <Card key={item.id} \r\n                id={item.id} \r\n                u1={item.u1} u2={item.u2} \r\n                name={item.name}\r\n                status={item.status}\r\n                cardClick={props.cardClick}\r\n                turn={props.turn} />\r\n            })}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Board;\r\n","const bank = [\r\n    { id: 1, u1: \"0xD83C\", u2: \"0xDF37\", name: \"tulip\", status: \"waiting\" },\r\n    { id: 2, u1: \"0xD83C\", u2: \"0xDF37\", name: \"tulip\", status: \"waiting\" },\r\n    { id: 3, u1: \"0xD83C\", u2: \"0xDF38\", name: \"sakura\", status: \"waiting\" },\r\n    { id: 4, u1: \"0xD83C\", u2: \"0xDF38\", name: \"sakura\", status: \"waiting\" },\r\n    { id: 5, u1: \"0xD83C\", u2: \"0xDF3B\", name: \"sunflower\", status: \"waiting\" },\r\n    { id: 6, u1: \"0xD83C\", u2: \"0xDF3B\", name: \"sunflower\", status: \"waiting\" },\r\n    { id: 7, u1: \"0xD83C\", u2: \"0xDF08\", name: \"rainbow\", status: \"waiting\" },\r\n    { id: 8, u1: \"0xD83C\", u2: \"0xDF08\", name: \"rainbow\", status: \"waiting\" },\r\n    { id: 9, u1: \"0xD83C\", u2: \"0xDF35\", name: \"cactus\", status: \"waiting\" },\r\n    { id: 10, u1: \"0xD83C\", u2: \"0xDF35\", name: \"cactus\", status: \"waiting\" },\r\n    { id: 11, u1: \"0xD83C\", u2: \"0xDF3A\", name: \"hibiscus\", status: \"waiting\" },\r\n    { id: 12, u1: \"0xD83C\", u2: \"0xDF3A\", name: \"hibiscus\", status: \"waiting\" },\r\n    { id: 13, u1: \"0xD83C\", u2: \"0xDF44\", name: \"mushroom\", status: \"waiting\" },\r\n    { id: 14, u1: \"0xD83C\", u2: \"0xDF44\", name: \"mushroom\", status: \"waiting\" },\r\n    { id: 15, u1: \"0xD83C\", u2: \"0xDF3C\", name: \"daisy\", status: \"waiting\" },\r\n    { id: 16, u1: \"0xD83C\", u2: \"0xDF3C\", name: \"daisy\", status: \"waiting\" },\r\n    { id: 17, u1: \"0xD83C\", u2: \"0xDF39\", name: \"rose\", status: \"waiting\" },\r\n    { id: 18, u1: \"0xD83C\", u2: \"0xDF39\", name: \"rose\", status: \"waiting\" },\r\n    { id: 19, u1: \"0xD83C\", u2: \"0xDF33\", name: \"tree\", status: \"waiting\" },\r\n    { id: 20, u1: \"0xD83C\", u2: \"0xDF33\", name: \"tree\", status: \"waiting\" }\r\n  ]\r\n\r\nexport default bank;","import React, { Component } from 'react';\n\nimport Overlay from '../Page/Overlay/Overlay';\nimport PlayerDash from '../Players/Dash/Dash';\nimport Board from '../Game/Board/Board';\nimport bank from '../Game/bank';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      overlay: true,\n      setup: true,\n      cards: [],\n      firstClick: {\n        name: null,\n        id: null\n      },\n      playerTurn: 0,\n      playerScore: [0, 0],\n      winner: null\n    };\n  }\n\n  //using the Fisher-Yates (aka Knuth) Shuffle\n  shuffle = (array) => {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  setUpGame = () => {\n    this.setState({\n      setup: true,\n    })\n  }\n\n  startGame = () => {\n    //play button after setting names\n    console.log(\"play\");\n    this.setState({\n      overlay: false,\n      setup: false,\n      playerTurn: 1\n    })\n    console.log(this.state)\n    this.resetBoard();\n  }\n\n  resetBoard = () => {\n    bank.forEach(card => {\n      card.status = \"waiting\";\n    })\n    this.setState({\n      cards: this.shuffle(bank)\n    })\n    if (this.state.winner) {\n      this.setState({\n        firstClick: {\n          name: null,\n          id: null\n        },\n        playerTurn: 1,\n        playerScore: [0, 0],\n        winner: null\n      })\n    }\n\n  }\n\n  gameOver = () => {\n    if (this.state.playerScore[0] > this.state.playerScore[1]) {\n      this.setState({ winner: 1 })\n    } else if (this.state.playerScore[0] < this.state.playerScore[1]) {\n      this.setState({ winner: 2 })\n    } else {\n      this.setState({ winner: 3 })\n    }\n  }\n\n  nextPlayer = (playerTurn) => {\n    if (playerTurn === 1) {\n      return 2;\n    } else if (playerTurn === 2) {\n      return 1;\n    } else {\n      console.log(\"player turn error: \", playerTurn)\n    }\n  }\n\n  cardCompare = (tempState, stateIndex1, stateIndex2) => {\n    let animationStatus = null;\n    let newStatus = null;\n    let card1temp = this.state.cards[stateIndex1]\n    let card2temp = this.state.cards[stateIndex2]\n    if (card1temp.name === card2temp.name) {\n      animationStatus = \"match\"\n      newStatus = \"removed\";\n      tempState.playerScore[tempState.playerTurn - 1]++;\n    } else {\n      animationStatus = \"no-match\"\n      newStatus = \"waiting\";\n      tempState.playerTurn = this.nextPlayer(tempState.playerTurn)\n    }\n    //change the status of the cards on the page so they \"animate\"\n    tempState.cards[stateIndex1].status = animationStatus\n    tempState.cards[stateIndex2].status = animationStatus\n    this.setState({ cards: tempState.cards })\n    setTimeout(() => {\n      //three seconds later, update state (with card statuses back to normal)\n      //which will resume the game \n      tempState.cards[stateIndex1].status = newStatus\n      tempState.cards[stateIndex2].status = newStatus\n      this.setState({\n        overlay: false,\n        cards: tempState.cards,\n        firstClick: { id: null, name: null },\n        playerTurn: tempState.playerTurn,\n        playerScore: tempState.playerScore\n      })\n      if ((tempState.playerScore[0] + tempState.playerScore[1]) === 10) {\n        this.gameOver();\n      }\n    }, 500)\n  }\n\n  cardClick = (cardID, cardStatus, cardName) => {\n    let tempState = this.state;\n    let i = (tempState.cards).findIndex((stateCard) => stateCard.id === cardID)\n    if (cardStatus === \"waiting\") {\n      tempState.cards[i].status = \"clicked\";\n      //first click of pair\n      if (tempState.firstClick.id === null) {\n        tempState.firstClick = { id: cardID, name: cardName }\n        this.setState({\n          cards: tempState.cards,\n          firstClick: tempState.firstClick\n        })\n      } else { //second click of pair\n        this.setState({ overlay: true }) //prevents player from clicking again before match finishes\n        let matchIndex = (tempState.cards).findIndex((stateCard) => stateCard.id === tempState.firstClick.id)\n        //turns over clicked card\n        this.setState({\n          cards: tempState.cards,\n        })\n        //timer for a second so player can look at both cards\n        setTimeout(() => {\n          this.cardCompare(tempState, i, matchIndex)\n        }, 200)\n      }\n    }\n  }\n\n  componentDidMount() {\n    console.log(\"app mounted\")\n    console.log(this.state)\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\" >\n        <PlayerDash\n          turn={this.state.playerTurn}\n          scores={this.state.playerScore}\n          setup={this.state.setup}\n          startGame={this.startGame.bind(this)}\n          winner={this.state.winner}\n          rematch={this.resetBoard.bind(this)} />\n        <div className=\"board-wrapper\">\n          {this.state.overlay\n            ? <Overlay />\n            : null\n          }\n          <Board bank={this.state.cards} cardClick={this.cardClick} turn={this.state.playerTurn} />\n        </div>\n        <div id=\"app-footer\"></div>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Page/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}